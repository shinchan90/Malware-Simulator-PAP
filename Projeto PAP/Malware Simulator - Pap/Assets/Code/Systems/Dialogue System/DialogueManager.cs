using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Ink.Runtime;
using TMPro;
using System;
using UnityEngine.InputSystem;
using System.IO;
using Newtonsoft.Json;
using UnityEngine.Audio;
using Ink;
using UnityEditor;
public class DialogueManager : MonoBehaviour
{
    //Instanciamento de variáveis
    private static DialogueManager Instance;
    [SerializeField]private TextAsset DialogueJSON;
    private Story CurrentDialogue;
    [SerializeField] private GameObject DialoguePanel;
    [SerializeField] private TextMeshProUGUI DialogueText;
    [SerializeField]private AudioSource AudioSource;
    private bool TextIsPlaying;

    private void Start()
    {
        //Define as váriaveis do diálogo e do painel de diálogo como falsas
        TextIsPlaying= false;
        DialoguePanel.SetActive(false);
    }
    private void Awake()
    {
        //Antes da classe ser instanciada verifica se já existe um processo da mesma em curso.
        if(Instance != null)
        {
            Debug.Log("There is more than one instance going on");
        }
        Instance = this;
    }

    public static DialogueManager GetInstance()
    {
        return Instance;

    }

    public void StartDialogue(TextAsset JsonFile, string Part)
    {
        //Método responsável pelo começo do diálogo, onde é definido o ficheiro e a parte do diálogo a ser mostrada.
        TextIsPlaying= true;
        DialoguePanel.SetActive(true);
        CurrentDialogue = new Story(JsonFile.text);
        CurrentDialogue.ChoosePathString(Part);
        ContinueDialogue();

    }

    public void FinishDialogue()
    {
        //Quando o diálogo terminar, o diálogo e o painel desaparecem
        TextIsPlaying = false;
        DialoguePanel.SetActive(false);
    }

    void Update()
    {
        //Verifica se a cada frame se o diálogo está em curso e se não estiver retorna.
        if(!TextIsPlaying)
        {
            return;
        }
        //Se a tecla espaço for pressionado o diálogo continua.
        if (Input.GetKeyDown(KeyCode.Space))
        {
            ContinueDialogue();
        }

        
    }

    public void ContinueDialogue()
    {

        //Verifica se o diálogo pode continuar
        if (CurrentDialogue.canContinue)
        {
            //Mostra o diálogo letra a letra
            StartCoroutine(TypeDialogue(CurrentDialogue.Continue().ToString()));

            string[] Tags = CurrentDialogue.currentTags.ToArray();
            foreach (string tag in Tags)
            {
                string ClipName = tag.Split('=')[1];
                string Path = "Assets/Audio/" + ClipName + ".wav";
                AudioClip clip = AssetDatabase.LoadAssetAtPath<AudioClip>(Path);

                if (clip != null)
                {
                    AudioSource.PlayOneShot(clip);
                    Debug.Log(clip.name);
                }
            }

        }
        else
        {
            //Se não houver mais diálogo as variáveis são definidas como falsas e o painel desparece.
            DialoguePanel.SetActive(false);
            TextIsPlaying = false;
            DialogueText.text = "";
        }

    }

    IEnumerator TypeDialogue(string DialogueSentence)
    {
        //Método responsável para mostrar o diálogo letra a letra.
        DialogueText.text = "";
        foreach (char letter in DialogueSentence.ToCharArray())
        {
            
            DialogueText.text += letter;
            yield return new WaitForSeconds(0.06f);
        }
    }

}
