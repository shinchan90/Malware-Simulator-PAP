using System.Collections;
using System.Collections.Generic;
using UnityEditor.Localization.Plugins.XLIFF.V12;
using UnityEngine;
using UnityEngine.InputSystem.HID;
using UnityEngine.Audio;

public class RayCastProximityTrigger : MonoBehaviour
{
    public GameObject Player;
    public bool IsInRange;
    private float Distance;
    private CursorInteraction CursorInteraction;
    public GameObject PressEPanel;
    public GameObject FirstActionPrompt;
    public bool HasInteracted = false;
    public bool HasPlayedAudio = false;
    [SerializeField]private AudioSource AudioSource;
    [SerializeField] private AudioClip NotificationClip;
    void Update()
    {
        RaycastTrigger();
    }

    public void RaycastTrigger()
    {
        //Vai buscar a classe CursorInteraction
        CursorInteraction = FindObjectOfType<CursorInteraction>();
        //É definida a direção,distancia e a camada afetada(Objetos são divididos por camadas de utilização, assim para que outros objetos n sejam afetados)
        Vector3 Direction = transform.position - Player.transform.position;
        Direction.Normalize();
        Distance = 5.0f;
        int layerMask = 1 << LayerMask.NameToLayer("Default");
        //É emitida a área de trigger
        if (Physics.Raycast(Player.transform.position, Direction, out RaycastHit Hit, Distance, layerMask))
        {
            //A Classe CursorInteraction é desativada e a InteractableObject é instanciada
            CursorInteraction.enabled = false;
            InteractableObject Interactable = Hit.collider.GetComponent<InteractableObject>();
            //Verifica se o jogador colidiu com a área de trigger de um objeto que possua a tag RayCastProximityTrigger
            if (Hit.collider != null && Hit.collider.gameObject.CompareTag("RayCastProximityTrigger"))
            {
                //A variável de promixidade é colocada como verdadeira e é iniciada a Corotina do painel(O Painel é uma notificação
                //que aparece para ajudar o jogador a sua orientar e saber o que fazer.
                IsInRange = true;
                StartCoroutine(DisablePanelAfterDelay());
                //Verifica se a tecla E é pressionada
                if (Input.GetKeyDown(KeyCode.E))
                {
                    //Executa os eventos
                    if (Interactable.OnInteractable != null)
                    {
                        Interactable.OnInteractable.Raise();
                    }
                    Interactable.TriggerDialogue();
                    
                }
                
            }
        }

        else
        {
            IsInRange = false;
            CursorInteraction.enabled = true;
        }
    }
    //Painel de notificação
    private IEnumerator DisablePanelAfterDelay()
    {
        //Verifica se o jogador já interagiu e se o áudio já foi tocado
        if(HasInteracted == false)
        {
            if(HasPlayedAudio== false)
            {
                AudioSource.PlayOneShot(NotificationClip);
            }
            HasPlayedAudio= true;
            //Ativa o painel e após 4 segundos desativa-o
            FirstActionPrompt.SetActive(false);
            PressEPanel.SetActive(true);
            yield return new WaitForSeconds(4);
            PressEPanel.SetActive(false);
        }
        HasInteracted= true;
        
    }
}
